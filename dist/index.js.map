{"version":3,"sources":["../src/index.ts","../src/chains/chains.ts","../src/chains/useChainData.tsx"],"sourcesContent":["export { useChainData } from \"./chains/useChainData\";\n\nexport {\n  getChains,\n  getChain,\n  getSubscriptions,\n  getSubscriptionsByChainId,\n  getTokensByChainId,\n} from \"./chains/chains\";\n","import type { TChainRecord, TTokenRecord } from \"../types\";\nimport axios from \"axios\";\n\n/**\n * Fetch chains for all supported networks.\n *\n * @returns `Promise<TChainRecord>`\n */\nexport const fetchChainData = async (): Promise<TChainRecord> => {\n  /** Initialize a default empty response or your preferred default structure */\n  let chains: TChainRecord;\n\n  try {\n    const response = await axios.get(\n      \"https://gitcoinco.github.io/chain-data/chains/chains.json\"\n    );\n\n    chains =\n      response.data; /** Assuming the API returns data that matches TChainRecord */\n    console.log(\"Fetching chains response\", {\n      response: chains,\n    });\n\n    return chains;\n  } catch (error) {\n    console.error(\"Error fetching chains\", error);\n\n    return []; /** This can be null or a default value if that's more appropriate */\n  }\n};\n\n/**\n * Fetch a specific chains data by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChainRecord>`\n */\nexport const fetchChainDataById = async (\n  chainId: number\n): Promise<TChainRecord> => {\n  /** Initialize a default empty response or preferred default structure */\n  let chains: TChainRecord;\n\n  try {\n    const response = await axios.get(\n      `https://gitcoinco.github.io/chain-data/chains/${chainId}/chain.json`\n    );\n\n    chains =\n      response.data; /** Assuming the API returns data that matches TChainRecord */\n    console.log(\"Fetching chains response\", {\n      response: chains,\n    });\n\n    return chains;\n  } catch (error) {\n    console.error(\"Error fetching chains\", error);\n\n    return []; /** This can be null or a default value if that's more appropriate */\n  }\n};\n\nexport const getChains = async () => {\n  return await fetchChainData();\n};\n\n/**\n * Get a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChainRecord>`\n */\nexport const getChain = async (chainId: number) => {\n  return await fetchChainDataById(chainId);\n};\n\n/**\n * Get all supported tokens for a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TTokenRecord>`\n */\nexport const getTokensByChainId = async (chainId: number) => {\n  const chainData: TChainRecord = await fetchChainDataById(chainId);\n\n  const tokens: TTokenRecord = {\n    payout: [],\n    indexer: [],\n    donation: [],\n  };\n\n  chainData?.forEach((chain) => {\n    tokens.payout.push(...chain.tokens.payout);\n    tokens.indexer.push(...chain.tokens.indexer);\n    tokens.donation.push(...chain.tokens.donation);\n  });\n\n  return tokens;\n};\n\n/**\n * Get all subscriptions\n *\n * @returns `Promise<(TSubscription | undefined)[]>`\n */\nexport const getSubscriptions = async () => {\n  const chainData: TChainRecord = await fetchChainData();\n  const subs = chainData.map((chain) => chain.subscriptions);\n\n  return subs.flat();\n};\n\n/**\n * Get all subscriptions for a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<(TSubscription | undefined)[]>`\n */\nexport const getSubscriptionsByChainId = async (chainId: number) => {\n  const chain = await fetchChainDataById(chainId);\n\n  return chain.map((c) => c.subscriptions).flat();\n};\n","import { fetchChainData, fetchChainDataById } from \"./chains\";\nimport type { TChainRecord, TTokenRecord } from \"../types\";\n\n/**\n * Custom hook to manage chain data\n *\n * @returns\n */\nexport const useChainData = () => {\n  /**\n   * Get all networks and their data.\n   *\n   * @returns `Promise<TChainRecord>`\n   */\n  const getChains = async () => {\n    return await fetchChainData();\n  };\n\n  /**\n   * Get a specific chain by its ID\n   *\n   * @param chainId The ID of the network to fetch data for.\n   * @returns `Promise<TChainRecord>`\n   */\n  const getChain = async (chainId: number) => {\n    return await fetchChainDataById(chainId);\n  };\n\n  /**\n   * Get all supported tokens for a specific chain by its ID\n   *\n   * @param chainId The ID of the network to fetch data for.\n   * @returns `Promise<TTokenRecord>`\n   */\n  const getTokensByChainId = async (chainId: number) => {\n    const chainData: TChainRecord = await fetchChainDataById(chainId);\n\n    const tokens: TTokenRecord = {\n      payout: [],\n      indexer: [],\n      donation: [],\n    };\n\n    chainData?.forEach((chain) => {\n      tokens.payout.push(...chain.tokens.payout);\n      tokens.indexer.push(...chain.tokens.indexer);\n      tokens.donation.push(...chain.tokens.donation);\n    });\n\n    return tokens;\n  };\n\n  /**\n   * Get all subscriptions\n   *\n   * @returns `Promise<(TSubscription | undefined)[]>`\n   */\n  const getSubscriptions = async () => {\n    const chainData: TChainRecord = await fetchChainData();\n    const subs = chainData.map((chain) => chain.subscriptions);\n\n    return subs.flat();\n  };\n\n  /**\n   * Get all subscriptions for a specific chain by its ID\n   *\n   * @param chainId The ID of the network to fetch data for.\n   * @returns `Promise<(TSubscription | undefined)[]>`\n   */\n  const getSubscriptionsByChainId = async (chainId: number) => {\n    const chain = await fetchChainDataById(chainId);\n\n    return chain.map((c) => c.subscriptions).flat();\n  };\n\n  return {\n    getChains,\n    getChain,\n    getTokensByChainId,\n    getSubscriptions,\n    getSubscriptionsByChainId,\n  };\n};\n"],"mappings":"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","names":["axios","getChains","getChain","getTokensByChainId","getSubscriptions","getSubscriptionsByChainId"]}