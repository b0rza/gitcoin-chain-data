{"version":3,"sources":["../src/index.ts","../src/chains/chains.ts"],"sourcesContent":["export * from \"./types\";\n\nexport {\n  getChains,\n  getChain,\n  getTokens,\n  getTokensByChainId,\n} from \"./chains/chains\";\n","import type { TChain, TToken } from \"../types\";\nimport axios from \"axios\";\n\n/**\n * Fetch chains for all supported networks.\n *\n * @returns `Promise<TChain>`\n */\nconst fetchChainData = async (): Promise<TChain[]> => {\n  /** Initialize a default empty response or your preferred default structure */\n  let chains: TChain[] = [] as TChain[];\n\n  try {\n    const response = await axios.get(\n      \"https://gitcoinco.github.io/chain-data/chains/chains.json\"\n    );\n\n    chains = response.data as TChain[];\n\n    return chains;\n  } catch (error) {\n    console.error(\"Error fetching chains\", error);\n\n    return [] as TChain[];\n  }\n};\n\n/**\n * Fetch a specific chains data by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChain>`\n */\nconst fetchChainDataById = async (chainId: number): Promise<TChain> => {\n  /** Initialize a default empty response or preferred default structure */\n  let chains: TChain;\n\n  try {\n    const response = await axios.get(\n      `https://gitcoinco.github.io/chain-data/chains/${chainId}/chain.json`\n    );\n\n    chains =\n      response.data; /** Assuming the API returns data that matches TChain */\n    console.log(\"Fetching chains response\", {\n      response: chains,\n    });\n\n    return chains;\n  } catch (error) {\n    console.error(\"Error fetching chains\", error);\n\n    return {} as TChain; /** This can be null or a default value if that's more appropriate */\n  }\n};\n\n/**\n * Get all supported chains\n *\n * @returns `Promise<TChain>`\n */\nexport const getChains = async () => {\n  return await fetchChainData();\n};\n\n/**\n * Get a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChain>`\n */\nexport const getChain = async (chainId: number) => {\n  return await fetchChainDataById(chainId);\n};\n\n/**\n *\n * @returns `Promise<TToken>`\n */\nexport const getTokens = async () => {\n  const chains = await fetchChainData();\n  const tokens: TToken[] = [];\n\n  chains.forEach((chain) => {\n    tokens.push(...chain.tokens);\n  });\n\n  return tokens;\n};\n\n/**\n * Get all supported tokens for a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TToken>`\n */\nexport const getTokensByChainId = async (chainId: number) => {\n  const chainData: TChain = await fetchChainDataById(chainId);\n  const tokens: TToken[] = [];\n\n  if (chainData) {\n    tokens.push(...chainData.tokens);\n  }\n\n  return tokens;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,mBAAkB;AAOlB,IAAM,iBAAiB,YAA+B;AAEpD,MAAI,SAAmB,CAAC;AAExB,MAAI;AACF,UAAM,WAAW,MAAM,aAAAA,QAAM;AAAA,MAC3B;AAAA,IACF;AAEA,aAAS,SAAS;AAElB,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAE5C,WAAO,CAAC;AAAA,EACV;AACF;AAQA,IAAM,qBAAqB,OAAO,YAAqC;AAErE,MAAI;AAEJ,MAAI;AACF,UAAM,WAAW,MAAM,aAAAA,QAAM;AAAA,MAC3B,iDAAiD,OAAO;AAAA,IAC1D;AAEA,aACE,SAAS;AACX,YAAQ,IAAI,4BAA4B;AAAA,MACtC,UAAU;AAAA,IACZ,CAAC;AAED,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAE5C,WAAO,CAAC;AAAA,EACV;AACF;AAOO,IAAM,YAAY,YAAY;AACnC,SAAO,MAAM,eAAe;AAC9B;AAQO,IAAM,WAAW,OAAO,YAAoB;AACjD,SAAO,MAAM,mBAAmB,OAAO;AACzC;AAMO,IAAM,YAAY,YAAY;AACnC,QAAM,SAAS,MAAM,eAAe;AACpC,QAAM,SAAmB,CAAC;AAE1B,SAAO,QAAQ,CAAC,UAAU;AACxB,WAAO,KAAK,GAAG,MAAM,MAAM;AAAA,EAC7B,CAAC;AAED,SAAO;AACT;AAQO,IAAM,qBAAqB,OAAO,YAAoB;AAC3D,QAAM,YAAoB,MAAM,mBAAmB,OAAO;AAC1D,QAAM,SAAmB,CAAC;AAE1B,MAAI,WAAW;AACb,WAAO,KAAK,GAAG,UAAU,MAAM;AAAA,EACjC;AAEA,SAAO;AACT;","names":["axios"]}