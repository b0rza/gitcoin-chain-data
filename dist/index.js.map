{"version":3,"sources":["../src/index.ts","../src/chains/chains.ts"],"sourcesContent":["export * from \"./types\";\n\nexport {\n  getChains,\n  getChainById,\n  getTokens,\n  getTokensByChainId,\n  getTokenByChainIdAndAddress,\n} from \"./chains/chains\";\n","import {\n  arbitrum,\n  // arbitrumSepolia,\n  avalanche,\n  avalancheFuji,\n  base,\n  celo,\n  celoAlfajores,\n  fantom,\n  lukso,\n  luksoTestnet,\n  mainnet,\n  optimism,\n  // optimismSepolia,\n  pgn,\n  // pgnTestnet,\n  polygon,\n  polygonMumbai,\n  scroll,\n  seiDevnet,\n  // scrollSepolia,\n  sepolia,\n  zkSync,\n  zkSyncSepoliaTestnet,\n} from \"viem/chains\";\nimport type { TChain, TToken } from \"../types\";\nimport axios from \"axios\";\nimport { Address } from \"viem\";\n\nconst supportedChainIds = [\n  mainnet.id,\n  sepolia.id,\n  lukso.id,\n  luksoTestnet.id,\n  polygon.id,\n  polygonMumbai.id,\n  fantom.id,\n  zkSyncSepoliaTestnet.id,\n  zkSync.id,\n  base.id,\n  optimism.id,\n  // optimismSepolia.id,\n  celo.id,\n  celoAlfajores.id,\n  arbitrum.id,\n  // arbitrumSepolia.id,\n  avalanche.id,\n  avalancheFuji.id,\n  scroll.id,\n  // scrollSepolia.id,\n  pgn.id,\n  // pgnTestnet.id,\n  seiDevnet.id,\n];\n\n/**\n * Fetch chains for all supported networks.\n *\n * @returns `Promise<TChain>`\n */\nexport const fetchChainData = async (): Promise<TChain[]> => {\n  /** Initialize a default empty response or your preferred default structure */\n  let chains: TChain[] = [] as TChain[];\n\n  for (const chainId of supportedChainIds) {\n    let response: { data: TChain };\n    try {\n      response = await axios.get(\n        `https://gitcoinco.github.io/chain-data/chains/${chainId}/chain.json`\n      );\n    } catch (error) {\n      console.error(\"Error fetching chains\", error);\n\n      return [] as TChain[];\n    }\n\n    chains.push(response.data as TChain);\n\n    console.log(\"Fetching chains response\", {\n      response: chains,\n    });\n  }\n\n  return chains;\n};\n\n/**\n * Fetch a specific chains data by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChain>`\n */\nconst fetchChainDataById = async (chainId: number): Promise<TChain> => {\n  /** Initialize a default empty response or preferred default structure */\n  let chains: TChain;\n\n  try {\n    const response = await axios.get(\n      `https://gitcoinco.github.io/chain-data/chains/${chainId}/chain.json`\n    );\n\n    chains =\n      response.data; /** Assuming the API returns data that matches TChain */\n    console.log(\"Fetching chains response\", {\n      response: chains,\n    });\n\n    return chains;\n  } catch (error) {\n    console.error(\"Error fetching chains\", error);\n\n    return {} as TChain; /** This can be null or a default value if that's more appropriate */\n  }\n};\n\n/**\n * Get all supported chains\n *\n * @returns `Promise<TChain>`\n */\nexport const getChains = async () => {\n  return await fetchChainData();\n};\n\n/**\n * Get a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChain>`\n */\nexport const getChainById = async (chainId: number) => {\n  return await fetchChainDataById(chainId);\n};\n\n/**\n *\n * @returns `Promise<TToken>`\n */\n/**\n * Fetches tokens from all chains.\n *\n * @returns `Promise<TToken[]>`\n */\nexport const getTokens = async (): Promise<TToken[]> => {\n  try {\n    const chains = await fetchChainData();\n    const tokens: TToken[] = [];\n\n    for (const chain of chains) {\n      if (chain.tokens && chain.tokens.length > 0) {\n        tokens.push(...chain.tokens);\n      } else {\n        console.warn(`Chain ${chain.name} does not have a valid tokens array.`);\n      }\n    }\n\n    return tokens;\n  } catch (error) {\n    console.error(\"Error fetching chain data:\", error);\n    throw error; // Rethrow the error after logging it\n  }\n};\n\n/**\n * Get all supported tokens for a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TToken>`\n */\nexport const getTokensByChainId = async (chainId: number) => {\n  const chainData: TChain = await fetchChainDataById(chainId);\n  const tokens: TToken[] = [];\n\n  if (chainData) {\n    tokens.push(...chainData.tokens);\n  }\n\n  return tokens;\n};\n\n/**\n * Get all supported tokens for a specific chain by its ID and address\n *\n * @param chainId The ID of the network to fetch data for.\n * @param address The address of the token to fetch.\n * @returns `Promise<TToken>`\n */\nexport const getTokenByChainIdAndAddress = async (\n  chainId: number,\n  address: Address\n) => {\n  const chainData: TChain = await fetchChainDataById(chainId);\n  let token: TToken | undefined;\n\n  if (chainData) {\n    token = chainData.tokens.find((token) => token.address === address);\n  }\n\n  return token as TToken;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAwBO;AAEP,mBAAkB;AAGlB,IAAM,oBAAoB;AAAA,EACxB,sBAAQ;AAAA,EACR,sBAAQ;AAAA,EACR,oBAAM;AAAA,EACN,2BAAa;AAAA,EACb,sBAAQ;AAAA,EACR,4BAAc;AAAA,EACd,qBAAO;AAAA,EACP,mCAAqB;AAAA,EACrB,qBAAO;AAAA,EACP,mBAAK;AAAA,EACL,uBAAS;AAAA;AAAA,EAET,mBAAK;AAAA,EACL,4BAAc;AAAA,EACd,uBAAS;AAAA;AAAA,EAET,wBAAU;AAAA,EACV,4BAAc;AAAA,EACd,qBAAO;AAAA;AAAA,EAEP,kBAAI;AAAA;AAAA,EAEJ,wBAAU;AACZ;AAOO,IAAM,iBAAiB,YAA+B;AAE3D,MAAI,SAAmB,CAAC;AAExB,aAAW,WAAW,mBAAmB;AACvC,QAAI;AACJ,QAAI;AACF,iBAAW,MAAM,aAAAA,QAAM;AAAA,QACrB,iDAAiD,OAAO;AAAA,MAC1D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,yBAAyB,KAAK;AAE5C,aAAO,CAAC;AAAA,IACV;AAEA,WAAO,KAAK,SAAS,IAAc;AAEnC,YAAQ,IAAI,4BAA4B;AAAA,MACtC,UAAU;AAAA,IACZ,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAQA,IAAM,qBAAqB,OAAO,YAAqC;AAErE,MAAI;AAEJ,MAAI;AACF,UAAM,WAAW,MAAM,aAAAA,QAAM;AAAA,MAC3B,iDAAiD,OAAO;AAAA,IAC1D;AAEA,aACE,SAAS;AACX,YAAQ,IAAI,4BAA4B;AAAA,MACtC,UAAU;AAAA,IACZ,CAAC;AAED,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAE5C,WAAO,CAAC;AAAA,EACV;AACF;AAOO,IAAM,YAAY,YAAY;AACnC,SAAO,MAAM,eAAe;AAC9B;AAQO,IAAM,eAAe,OAAO,YAAoB;AACrD,SAAO,MAAM,mBAAmB,OAAO;AACzC;AAWO,IAAM,YAAY,YAA+B;AACtD,MAAI;AACF,UAAM,SAAS,MAAM,eAAe;AACpC,UAAM,SAAmB,CAAC;AAE1B,eAAW,SAAS,QAAQ;AAC1B,UAAI,MAAM,UAAU,MAAM,OAAO,SAAS,GAAG;AAC3C,eAAO,KAAK,GAAG,MAAM,MAAM;AAAA,MAC7B,OAAO;AACL,gBAAQ,KAAK,SAAS,MAAM,IAAI,sCAAsC;AAAA,MACxE;AAAA,IACF;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,UAAM;AAAA,EACR;AACF;AAQO,IAAM,qBAAqB,OAAO,YAAoB;AAC3D,QAAM,YAAoB,MAAM,mBAAmB,OAAO;AAC1D,QAAM,SAAmB,CAAC;AAE1B,MAAI,WAAW;AACb,WAAO,KAAK,GAAG,UAAU,MAAM;AAAA,EACjC;AAEA,SAAO;AACT;AASO,IAAM,8BAA8B,OACzC,SACA,YACG;AACH,QAAM,YAAoB,MAAM,mBAAmB,OAAO;AAC1D,MAAI;AAEJ,MAAI,WAAW;AACb,YAAQ,UAAU,OAAO,KAAK,CAACC,WAAUA,OAAM,YAAY,OAAO;AAAA,EACpE;AAEA,SAAO;AACT;","names":["axios","token"]}