{"version":3,"sources":["../src/index.ts","../src/types.ts","../src/chains/chains.ts"],"sourcesContent":["export * from \"./types\";\n\nexport {\n  getChains,\n  getChain,\n  getSubscriptions,\n  getSubscriptionsByChainId,\n  getTokensByChainId,\n} from \"./chains/chains\";\n\n","import type { Address, Chain } from \"viem\";\n\nexport const RedstoneTokenIds = {\n  FTM: \"FTM\",\n  USDC: \"USDC\",\n  DAI: \"DAI\",\n  ETH: \"ETH\",\n  ARB: \"ARB\",\n  BUSD: \"BUSD\",\n  GTC: \"GTC\",\n  MATIC: \"MATIC\",\n  AVAX: \"AVAX\",\n  CVP: \"CVP\",\n  USDT: \"USDT\",\n  LUSD: \"LUSD\",\n  MUTE: \"MUTE\",\n  mkUSD: \"mkUSD\",\n  DATA: \"DATA\",\n  USDGLO: \"USDGLO\",\n  SEI: \"SEI\",\n  OP: \"OP\",\n  LYX: \"LYX\",\n  CELO: \"CELO\",\n  CUSD: \"CUSD\",\n} as const;\n\nexport type TIndexerToken = {\n  code: string;\n  icon: string;\n  address: Address;\n  decimals: number;\n  priceSource: { chainId: number; address: string };\n  voteAmountCap?: bigint;\n};\n\nexport type TPayoutToken = {\n  name: string;\n  chainId: number;\n  address: Address;\n  logo?: string;\n  default?: boolean;\n  redstoneTokenId?: string;\n  decimal: number;\n};\n\nexport type TDonationToken = {\n  name: string;\n  chainId: number;\n  address: Address;\n  decimal: number;\n  logo?: string;\n  default?: boolean;\n  redstoneTokenId: string;\n  permitVersion?: string;\n};\n\nexport type TSubscription = {\n  address: Address;\n  contractName: any; // keyof typeof abis;\n  fromBlock?: number;\n  eventsRenames?: Record<string, string>;\n};\n\nexport type TChain = Chain & {\n  rpc: string;\n  name: string;\n  id: number;\n  pricesFromTimestamp?: number;\n  tokens: {\n    payout: TPayoutToken[];\n    indexer: TIndexerToken[];\n    donation: TDonationToken[];\n  };\n  subscriptions?: TSubscription[];\n  maxGetLogsRange?: number;\n};\n\nexport type TSubscriptionRecord = Record<number, TSubscription[]>;\nexport type TTokenRecord = {\n  payout: TPayoutToken[];\n  indexer: TIndexerToken[];\n  donation: TDonationToken[];\n};\nexport type TChainRecord = TChain[];\n\nexport enum ETokenType {\n  PAYOUT = \"payout\",\n  DONATION = \"donation\",\n  INDEXER = \"indexer\",\n}\n","import type { TChainRecord, TTokenRecord } from \"../types\";\nimport axios from \"axios\";\n\n/**\n * Fetch chains for all supported networks.\n *\n * @returns `Promise<TChainRecord>`\n */\nexport const fetchChainData = async (): Promise<TChainRecord> => {\n  /** Initialize a default empty response or your preferred default structure */\n  let chains: TChainRecord;\n\n  try {\n    const response = await axios.get(\n      \"https://gitcoinco.github.io/chain-data/chains/chains.json\"\n    );\n\n    chains =\n      response.data; /** Assuming the API returns data that matches TChainRecord */\n    console.log(\"Fetching chains response\", {\n      response: chains,\n    });\n\n    return chains;\n  } catch (error) {\n    console.error(\"Error fetching chains\", error);\n\n    return []; /** This can be null or a default value if that's more appropriate */\n  }\n};\n\n/**\n * Fetch a specific chains data by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChainRecord>`\n */\nexport const fetchChainDataById = async (\n  chainId: number\n): Promise<TChainRecord> => {\n  /** Initialize a default empty response or preferred default structure */\n  let chains: TChainRecord;\n\n  try {\n    const response = await axios.get(\n      `https://gitcoinco.github.io/chain-data/chains/${chainId}/chain.json`\n    );\n\n    chains =\n      response.data; /** Assuming the API returns data that matches TChainRecord */\n    console.log(\"Fetching chains response\", {\n      response: chains,\n    });\n\n    return chains;\n  } catch (error) {\n    console.error(\"Error fetching chains\", error);\n\n    return []; /** This can be null or a default value if that's more appropriate */\n  }\n};\n\nexport const getChains = async () => {\n  return await fetchChainData();\n};\n\n/**\n * Get a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TChainRecord>`\n */\nexport const getChain = async (chainId: number) => {\n  return await fetchChainDataById(chainId);\n};\n\n/**\n *\n * @returns `Promise<TTokenRecord>`\n */\n// todo: implement this function\n// export const getTokens = async () => {\n//   const chains = await fetchChainData();\n//   const tokens: TTokenRecord[] = [\n//     {\n//       payout: [],\n//       indexer: [],\n//       donation: [],\n//     },\n//   ];\n\n//   chains.forEach((chain) => {\n//     tokens.push(...chain.tokens);\n//   });\n//   return tokens;\n// };\n\n/**\n * Get all supported tokens for a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<TTokenRecord>`\n */\nexport const getTokensByChainId = async (chainId: number) => {\n  const chainData: TChainRecord = await fetchChainDataById(chainId);\n\n  const tokens: TTokenRecord = {\n    payout: [],\n    indexer: [],\n    donation: [],\n  };\n\n  chainData?.forEach((chain) => {\n    if (chain.id === chainId) {\n      tokens.payout.push(...chain.tokens.payout);\n      tokens.indexer.push(...chain.tokens.indexer);\n      tokens.donation.push(...chain.tokens.donation);\n    }\n  });\n\n  return tokens;\n};\n\n/**\n * Get all subscriptions\n *\n * @returns `Promise<(TSubscription | undefined)[]>`\n */\nexport const getSubscriptions = async () => {\n  const chainData: TChainRecord = await fetchChainData();\n  const subs = chainData.map((chain) => chain.subscriptions);\n\n  return subs.flat();\n};\n\n/**\n * Get all subscriptions for a specific chain by its ID\n *\n * @param chainId The ID of the network to fetch data for.\n * @returns `Promise<(TSubscription | undefined)[]>`\n */\nexport const getSubscriptionsByChainId = async (chainId: number) => {\n  const chain = await fetchChainDataById(chainId);\n\n  return chain.map((c) => c.subscriptions).flat();\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEO,IAAM,mBAAmB;AAAA,EAC9B,KAAK;AAAA,EACL,MAAM;AAAA,EACN,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,MAAM;AAAA,EACN,KAAK;AAAA,EACL,OAAO;AAAA,EACP,MAAM;AAAA,EACN,KAAK;AAAA,EACL,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,IAAI;AAAA,EACJ,KAAK;AAAA,EACL,MAAM;AAAA,EACN,MAAM;AACR;AA6DO,IAAK,aAAL,kBAAKA,gBAAL;AACL,EAAAA,YAAA,YAAS;AACT,EAAAA,YAAA,cAAW;AACX,EAAAA,YAAA,aAAU;AAHA,SAAAA;AAAA,GAAA;;;ACpFZ,mBAAkB;AAOX,IAAM,iBAAiB,YAAmC;AAE/D,MAAI;AAEJ,MAAI;AACF,UAAM,WAAW,MAAM,aAAAC,QAAM;AAAA,MAC3B;AAAA,IACF;AAEA,aACE,SAAS;AACX,YAAQ,IAAI,4BAA4B;AAAA,MACtC,UAAU;AAAA,IACZ,CAAC;AAED,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAE5C,WAAO,CAAC;AAAA,EACV;AACF;AAQO,IAAM,qBAAqB,OAChC,YAC0B;AAE1B,MAAI;AAEJ,MAAI;AACF,UAAM,WAAW,MAAM,aAAAA,QAAM;AAAA,MAC3B,iDAAiD,OAAO;AAAA,IAC1D;AAEA,aACE,SAAS;AACX,YAAQ,IAAI,4BAA4B;AAAA,MACtC,UAAU;AAAA,IACZ,CAAC;AAED,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAE5C,WAAO,CAAC;AAAA,EACV;AACF;AAEO,IAAM,YAAY,YAAY;AACnC,SAAO,MAAM,eAAe;AAC9B;AAQO,IAAM,WAAW,OAAO,YAAoB;AACjD,SAAO,MAAM,mBAAmB,OAAO;AACzC;AA6BO,IAAM,qBAAqB,OAAO,YAAoB;AAC3D,QAAM,YAA0B,MAAM,mBAAmB,OAAO;AAEhE,QAAM,SAAuB;AAAA,IAC3B,QAAQ,CAAC;AAAA,IACT,SAAS,CAAC;AAAA,IACV,UAAU,CAAC;AAAA,EACb;AAEA,aAAW,QAAQ,CAAC,UAAU;AAC5B,QAAI,MAAM,OAAO,SAAS;AACxB,aAAO,OAAO,KAAK,GAAG,MAAM,OAAO,MAAM;AACzC,aAAO,QAAQ,KAAK,GAAG,MAAM,OAAO,OAAO;AAC3C,aAAO,SAAS,KAAK,GAAG,MAAM,OAAO,QAAQ;AAAA,IAC/C;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAOO,IAAM,mBAAmB,YAAY;AAC1C,QAAM,YAA0B,MAAM,eAAe;AACrD,QAAM,OAAO,UAAU,IAAI,CAAC,UAAU,MAAM,aAAa;AAEzD,SAAO,KAAK,KAAK;AACnB;AAQO,IAAM,4BAA4B,OAAO,YAAoB;AAClE,QAAM,QAAQ,MAAM,mBAAmB,OAAO;AAE9C,SAAO,MAAM,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,KAAK;AAChD;","names":["ETokenType","axios"]}